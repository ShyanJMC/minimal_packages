# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Ionut Biru <ibiru@archlinux.org>
# Contributor: Jakub Schmidtke <sjakub@gmail.com>

# Modder: Joaquin 'ShyanJMC' Crespo <shyan@shyanjmc.com>

pkgname=firefox
pkgver=130.0
pkgrel=99
pkgdesc="Standalone web browser from mozilla.org"
url="https://www.mozilla.org/firefox/"
arch=(x86_64)
license=(
  GPL
  LGPL
  MPL
)
depends=(
  dbus-glib
  ffmpeg
  gtk3
  libpulse
  libxss
  libxt
  mime-types
  nss
  ttf-font
)
makedepends=(
  cbindgen
  clang
  diffutils
  dump_syms
  gtk3
  imake
  inetutils
  lld
  llvm
  mesa
  mold
  nasm
  nodejs
  pipewire
  pipewire-alsa
  pipewire-pulse
  python3
  python-pip
  rustup
  sndio
  unzip
  wasi-compiler-rt
  wasi-libc
  wasi-libc++
  wasi-libc++abi
  wayland
  wireplumber
  yasm
  zip
)
optdepends=(
  'hunspell-en_US: Spell checking, American English'
  'libnotify: Notification integration'
  'networkmanager: Location detection via available WiFi networks'
  'pulseaudio: Audio support'
  'speech-dispatcher: Text-to-Speech'
  'xdg-desktop-portal: Screensharing with Wayland'
)
options=(
  !debug
  !emptydirs
  !lto
  !makeflags
  strip
)
source=(
  https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}
  $pkgname.desktop
  identity-icons-brand.svg
)
validpgpkeys=(
  '14F26682D0916CDD81E37B6D61B7B526D98F0353'  # Mozilla Software Releases <release@mozilla.com>
)

b2sums=('9c7dfc43145e442d60f6971806848e4ecd0145713e31105da6bd13a82a50655f5c4095beff4d61505e26e188b60f49b16dc17fb42dc03a9fb9ef509a7010b0ab'
        'SKIP'
        'd07557840097dd48a60c51cc5111950781e1c6ce255557693bd11306c7a9258b2a82548329762148f117b2295145f9e66e0483a18e2fe09c5afcffed2e4b8628'
        '63a8dd9d8910f9efb353bed452d8b4b2a2da435857ccee083fc0c557f8c4c1339ca593b463db320f70387a1b63f1a79e709e9d12c69520993e26d85a3d742e34')


prepare() {
  
  export MOZ_APP_REMOTINGNAME=${_pkgname}
  if [ -d mozbuild/]; then
  	rm -rf mozbuild/*
  else
  	mkdir -p mozbuild
  fi
  cd firefox-$pkgver
  rustup default stable

  cat >../mozconfig <<END

export MOZILLA_OFFICIAL=1
export MOZ_APP_REMOTINGNAME=${pkgname//-/}

ac_add_options --enable-application=browser
ac_add_options --enable-linker=mold
ac_add_options --prefix=/usr
ac_add_options --disable-debug-symbols
ac_add_options --disable-rust-debug
ac_add_options --disable-rust-tests
#ac_add_options --enable-address-sanitizer
ac_add_options --disable-fuzzing
#ac_add_options --enable-signed-overflow-sanitizer
#ac_add_options --disable-nodejs
ac_add_options --enable-strip
ac_add_options --disable-accessibility
ac_add_options --disable-parental-controls
ac_add_options --disable-synth-speechd
ac_add_options --disable-webspeech
ac_add_options --disable-webspeechtestbackend
ac_add_options --disable-wmf
ac_add_options --disable-debug-js-modules
ac_add_options --enable-sandbox
ac_add_options --enable-webrtc
ac_add_options --disable-bootstrap
ac_add_options --enable-release
ac_add_options --with-app-name=${pkgname}
ac_add_options --with-app-basename=${pkgname}
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=com.shyanjmc.firefox
ac_add_options --disable-unverified-updates
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --disable-alsa
ac_add_options --disable-jack
ac_add_options --enable-hardening
ac_add_options --enable-optimize
ac_add_options --enable-rust-simd
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --disable-elf-hack
ac_add_options --enable-lto
ac_add_options --without-wasm-sandboxed-libraries
ac_add_options --enable-wasm-memory64
ac_add_options --enable-wasm-memory-control
ac_add_options --enable-wasm-multi-memory
ac_add_options --enable-wasm-relaxed-simd
ac_add_options --enable-wasm-avx
ac_add_options --enable-wasm-simd

ac_add_options --disable-valgrind
ac_add_options --disable-gtest-in-build

# This requires cargo nightly, do not enable
#ac_add_options --enable-thread-sanitizer

#ac_add_options --enable-undefined-sanitizer
#ac_add_options --enable-unsigned-overflow-sanitizer

ac_add_options --enable-frame-pointers
ac_add_options --enable-audio-backends=pulseaudio
ac_add_options --enable-pulseaudio
ac_add_options --enable-sndio
ac_add_options --enable-default-toolkit=cairo-gtk3-wayland-only
ac_add_options --disable-webdriver
ac_add_options --enable-proxy-bypass-protection
ac_add_options --disable-proxy-direct-failover
ac_add_options --disable-backgroundtasks
ac_add_options --disable-legacy-profile-creation

END
}

build() {
  cd firefox-$pkgver

  export MOZCONFIG="$srcdir/mozconfig"
  export MOZ_NOSPAM=1
  export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
  export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip

  # LTO needs more open files
  ulimit -n 4096

  ./mach build
  

}

package() {
  	cd firefox-$pkgver
  	DESTDIR="$pkgdir" ./mach install

  	local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
  	install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Dont disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);

// More time before save file session in disk, this is to avoid consume SSD cycles
pref("browser.sessionstore.interval", 1800000);

// Hardening configurations/options guide
// https://brainfucksec.github.io/firefox-hardening-guide

// Disable startup warning
pref("browser.aboutConfig.showWarning", false);

// Home as startup page
// 0 = blank
// 1 = home
// 2 = last visited page
// 3 = resume previous session
pref("browser.startup.page", 1);
pref("browser.startup.homepage", "about:home");

// Disable Activity Stream on new windows and tab pages
pref("browser.newtabpage.enabled", false);
pref("browser.newtab.preload", false);
pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
pref("browser.newtabpage.activity-stream.telemetry", false);
pref("browser.newtabpage.activity-stream.feeds.snippets", false);
pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);
pref("browser.newtabpage.activity-stream.feeds.discoverystreamfeed", false);
pref("browser.newtabpage.activity-stream.showSponsored", false);
pref("browser.newtabpage.activity-stream.default.sites", false);
pref("browser.newtabpage.activity-stream.default.sites", "");

// Geolocation
pref("geo.provider.network.url", "");

// Disable using the OS’s geolocation service
pref("geo.provider.use_gpsd", false );
pref("geo.provider.use_geoclue", false);

// Disable region updates:
pref("browser.region.network.url", "");
pref("browser.region.update.enabled", false);

// Auto-updates / Recommendations
pref("pp.update.auto", false);

// Disable addons recommendations (uses Google Analytics)
pref("extensions.getAddons.showPane", false);
pref("extensions.htmlaboutaddons.recommendations.enabled", false);
pref("browser.discovery.enabled", false);

// Disable telemetry
pref("datareporting.policy.dataSubmissionEnabled", false);
pref("datareporting.healthreport.uploadEnabled", false);
pref("toolkit.telemetry.enabled", false);
pref("toolkit.telemetry.unified", false);
pref("toolkit.telemetry.server","data:,");
pref("toolkit.telemetry.archive.enabled", false);
pref("toolkit.telemetry.newProfilePing.enabled", false);
pref("toolkit.telemetry.shutdownPingSender.enabled", false);
pref("toolkit.telemetry.updatePing.enabled", false);
pref("toolkit.telemetry.bhrPing.enabled", false);
pref("toolkit.telemetry.firstShutdownPing.enabled", false);
pref("toolkit.telemetry.coverage.opt-out", true);
pref("toolkit.coverage.opt-out", true);
pref("toolkit.coverage.endpoint.base", "");
pref("browser.ping-centre.telemetry", false);
pref("beacon.enabled", false);


// Disable studies:
pref("app.shield.optoutstudies.enabled", false);

// Disable Normandy/Shield:
pref("app.normandy.enabled", false);
pref("app.normandy.api_url", "");

// Disable crash reports
pref("breakpad.reportURL", "");
pref("browser.tabs.crashReporting.sendReport", false);

// Disable captive portal detection
pref("captivedetect.canonicalURL", "");
pref("network.captive-portal-service.enabled", false);

// Disable network connections checks
pref("network.connectivity-service.enabled", false);

// Disable safe browsing service
pref("browser.safebrowsing.malware.enabled", false);
pref("browser.safebrowsing.phishing.enabled", false);

// Disable list of blocked URI
// pref("browser.safebrowsing.blockedURIs.enabled", false);

// Disable fetch of updates
pref("browser.safebrowsing.provider.google4.gethashURL", "");
pref("browser.safebrowsing.provider.google4.updateURL","");
pref("browser.safebrowsing.provider.google.gethashURL","");
pref("browser.safebrowsing.provider.google.updateURL","");
pref("browser.safebrowsing.provider.google4.dataSharingURL","");

// Disable checks for downloads
pref("browser.safebrowsing.downloads.enabled", false);
pref("browser.safebrowsing.downloads.remote.enabled",false);
pref("browser.safebrowsing.downloads.remote.url", "");

// Disable checks for unwanted software
pref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", false);
pref("browser.safebrowsing.downloads.remote.block_uncommon", false);

// Disable bypasses the block of safe browsing with a click for current session:
pref("browser.safebrowsing.allowOverride", false); 

// Disable link prefetching
pref("network.prefetch-next", false);

// Disable DNS prefetching
pref("network.dns.disablePrefetch", false);

// Disable predictor
pref("network.predictor.enabled", false);

// Disable link-mouseover opening connection to linked server
pref("network.http.speculative-parallel-limit", 0);

// Disable mousedown speculative connections on bookmarks and history
pref("browser.places.speculativeConnect.enabled", false);

// Disable IPv6
// pref("network.dns.disableIPv6", false);

// Disable GIO protocols as a potential proxy bypass vectors
pref("network.gio.supported-protocols", "");

// Disable using UNC (Uniform Naming Convention) paths (prevent proxy bypass)
pref("network.file.disable_unc_paths", true);

// Remove special permissions for certain mozilla domains
pref("permissions.manager.defaultsUrl", "");

// Use Punycode in Internationalized Domain Names to eliminate possible spoofing
pref("network.IDN_show_punycode",true);

// Disable search suggestions
pref("browser.search.suggest.enabled", false);
pref("browser.urlbar.suggest.searches", false);

// Disable location bar domain guessing:

pref("browser.fixup.alternate.enabled", false);

// Display all parts of the url in the bar:

pref("browser.urlbar.trimURLs", false);

// Disable location bar making speculative connections:

pref("browser.urlbar.speculativeConnect.enabled", false);

// Disable form autofill:

pref("browser.formfill.enable", false);
pref("extensions.formautofill.addresses.enabled", false);
pref("extensions.formautofill.available", "off");
pref("extensions.formautofill.creditCards.available", false);
pref("extensions.formautofill.creditCards.enabled", false);
pref("extensions.formautofill.heuristics.enabled", false);

// Disable location bar contextual suggestions:

pref("browser.urlbar.quicksuggest.scenario","history");
pref("browser.urlbar.quicksuggest.enabled", false);
pref("browser.urlbar.suggest.quicksuggest.nonsponsored", false);
pref("browser.urlbar.suggest.quicksuggest.sponsored", false);

// Disable saving passwords:

pref("signon.rememberSignons", false);

// Disable autofill login and passwords:

pref("signon.autofillForms", false);

// Disable formless login capture for Password Manager:

pref("signon.formlessCapture.enabled", false);

// Hardens against potential credentials phishing:
// 0 = don’t allow sub-resources to open HTTP authentication credentials dialogs
// 1 = don’t allow cross-origin sub-resources to open HTTP authentication credentials dialogs
// 2 = allow sub-resources to open HTTP authentication credentials dialogs (default)

pref("network.auth.subresource-http-auth-allow", 1);

// Disable disk cache:

pref("browser.cache.disk.enable", false);

// Disable storing extra session data:
// 0 = everywhere
// 1 = unencrypted sites
// 2 = nowhere

pref("browser.sessionstore.privacy_level", 2);

// Disable resuming session from crash:

pref("browser.sessionstore.resume_from_crash", false);

// Disable page thumbnail collection

pref("browser.pagethumbnails.capturing_disabled", true);

// Disable favicons in profile folder

pref("browser.shell.shortcutFavicons", false);

// Delete temporary files opened with external apps:

pref("browser.helperApps.deleteTempFileOnExit", true);

// Enable HTTPS-Only mode in all windows:

pref("dom.security.https_only_mode", true);

// Disable sending HTTP request for checking HTTPS support by the server:

pref("dom.security.https_only_mode_send_http_background_request", false);

// Display advanced information on Insecure Connection warning pages:

pref("browser.xul.error_pages.expert_bad_cert", true);

// Disable TLS1.3 0-RTT (round-trip time):

pref("security.tls.enable_0rtt_data", false);

// Set OCSP to terminate the connection when a CA isn’t validate:

pref("security.OCSP.require", true);

// Disable SHA-1 certificates:

pref("security.pki.sha1_enforcement_level", 1);

// Enable strict pinning (PKP (Public Key Pinning)):
// 0 = disabled
// 1 = allow user MiTM (i.e. your Antivirus)
// 2 = strict

pref("security.cert_pinning.enforcement_level", 2);

// Enable CRLite
// 0 = disabled
// 1 = consult CRLite but only collect telemetry (default)
// 2 = consult CRLite and enforce both “Revoked” and “Not Revoked” results
// 3 = consult CRLite and enforce “Not Revoked” results, but defer to OCSP for “Revoked”

pref("security.remote_settings.crlite_filters.enabled", true);
pref("security.pki.crlite_mode", 2);

// Control when to send a referer:
// 0 = always (default)
// 1 = only if base domains match
// 2 = only if hosts match

pref("network.http.referer.XOriginPolicy", 2);

// Control the amount of information to send:
// 0 = send full URI (default): https://example.com:8888/foo/bar.html?id=1234
// 1 = scheme+host+port+path: https://example.com:8888/foo/bar.html
// 2 = scheme+host+port: https://example.com:8888

pref("network.http.referer.XOriginTrimmingPolicy", 2);

// Disable WebRTC

// pref("media.peerconnection.enabled", false);

// Force WebRTC inside the proxy:

pref("media.peerconnection.ice.proxy_only_if_behind_proxy", true);

// Force a single network interface for ICE candidates generation:

pref("media.peerconnection.ice.default_address_only", true);

// Force exclusion of private IPs from ICE candidates:

pref("media.peerconnection.ice.no_host", true);

// Disable WebGL (Web Graphics Library):

// pref("webgl.disabled", true);

// Disable autoplay of HTML5 media:
// 0 = allow all
// 1 = block non-muted media (default)
// 5 = block all

pref("media.autoplay.default", 5);
    
// Disable DRM Content: 
// pref("media.eme.enabled", false);

// Always ask you where to save files:

pref("browser.download.useDownloadDir", false);

// Disable adding downloads to system’s “recent documents” list:

pref("browser.download.manager.addToRecentDocs", false);

// Enable ETP (Enhanced Tracking Protection), ETP strict mode enables Total Cookie Protection (TCP):

pref("browser.contentblocking.category", "strict");

// Enable state partitioning of service workers:

pref("privacy.partition.serviceWorkers", true);

// Enable APS (Always Partitioning Storage)

pref("privacy.partition.always_partition_third_party_non_cookie_storag", true);
pref("privacy.partition.always_partition_third_party_non_cookie_storage.exempt_sessionstorage", true);

// Block popup windows:

pref("dom.disable_open_during_load", true);

// Limit events that can cause a popup:

pref("dom.popup_allowed_events", "click dblclick mousedown pointerdown");

// Disable Pocket extension:

pref("extensions.pocket.enabled", false);

// Disable Screenshots extension:

//pref("extensions.Screenshots.disabled", true);

// Disable PDJFS scripting:

pref("pdfjs.enableScripting", false);

// Enable Containers and show the UI settings:

pref("privacy.userContext.enabled", true);
pref("privacy.userContext.enabled", true);

// Set extensions to work on restricted domains, and their scopeis to “profile+applications”:

pref("extensions.enabledScopes", 5);
pref("extensions.webextensions.restrictedDomains", "");

// Display always the installation prompt:

pref("extensions.postDownloadThirdPartyPrompt", false);

// Clear history, cookies and site data when Firefox closes:

pref("network.cookie.lifetimePolicy", 2);
pref("privacy.sanitize.sanitizeOnShutdown", true);
pref("privacy.clearOnShutdown.cache", true);
pref("privacy.clearOnShutdown.cookies", true);
pref("privacy.clearOnShutdown.downloads", true);
pref("privacy.clearOnShutdown.formdata", true);
pref("privacy.clearOnShutdown.history", true);
pref("privacy.clearOnShutdown.offlineApps", true);
pref("privacy.clearOnShutdown.sessions", true);
pref("privacy.clearOnShutdown.sitesettings", false);
pref("privacy.sanitize.timeSpan", 0);

// Enable RFP:

pref("privacy.resistFingerprinting", true);

// Set new window size rounding max values:

pref("privacy.window.maxInnerWidth", 1600);
pref("privacy.window.maxInnerHeight", 900);

// Disable mozAddonManager Web API:

pref("privacy.resistFingerprinting.block_mozAddonManager", true);

// Disable using system colors:

pref("browser.display.use_system_colors", false);

// Disable showing about:blank page when possible at startup

pref("browser.startup.blankWindow", false);

// Disable using system colors:

pref("browser.display.use_system_colors", false);

// Hidde download button when is not active

pref("browser.download.autohideButton", true);


END

  	local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
  	install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinux
version=1.0
about=Mozilla Firefox for Arch Linux based systems

[Preferences]
app.distributor=shyanjmc
app.distributor.channel=$pkgname
app.partner.archlinux=archlinux
END

  local i theme=official
  for i in 16 22 24 32 48 64 128 256; do
    install -Dvm644 browser/branding/$theme/default$i.png \
      "$pkgdir/usr/share/icons/hicolor/${i}x${i}/apps/$pkgname.png"
  done
  install -Dvm644 browser/branding/$theme/content/about-logo.png \
    "$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo@2x.png \
    "$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo.svg \
    "$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"
  install -Dvm644 ../identity-icons-brand.svg \
    "$pkgdir/usr/share/icons/hicolor/symbolic/apps/$pkgname-symbolic.svg"

  install -Dvm644 ../$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  # Install a wrapper to avoid confusion about binary path
  install -Dvm755 /dev/stdin "$pkgdir/usr/bin/$pkgname" <<END
#!/bin/sh
exec /usr/lib/$pkgname/firefox "\$@"
END

  # Replace duplicate binary with wrapper
  # https://bugzilla.mozilla.org/show_bug.cgi?id=658850
  ln -srfv "$pkgdir/usr/local/bin/$pkgname" "$pkgdir/usr/lib/$pkgname/firefox-bin"

  # Use system certificates
  local nssckbi="$pkgdir/usr/lib/$pkgname/libnssckbi.so"
  if [[ -e $nssckbi ]]; then
    ln -srfv "$pkgdir/usr/lib/libnssckbi.so" "$nssckbi"
  fi

}
